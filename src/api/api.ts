/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from '../request'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
import type { RequestArgs } from './base'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base'

/**
 *
 * @export
 * @interface CommonResponseLoginUserVo
 */
export interface CommonResponseLoginUserVo {
  /**
   *
   * @type {number}
   * @memberof CommonResponseLoginUserVo
   */
  code?: number
  /**
   *
   * @type {LoginUserVo}
   * @memberof CommonResponseLoginUserVo
   */
  data?: LoginUserVo
  /**
   *
   * @type {string}
   * @memberof CommonResponseLoginUserVo
   */
  message?: string
}
/**
 *
 * @export
 * @interface CommonResponseLong
 */
export interface CommonResponseLong {
  /**
   *
   * @type {number}
   * @memberof CommonResponseLong
   */
  code?: number
  /**
   *
   * @type {number}
   * @memberof CommonResponseLong
   */
  data?: number
  /**
   *
   * @type {string}
   * @memberof CommonResponseLong
   */
  message?: string
}
/**
 *
 * @export
 * @interface CommonResponsePageUserVo
 */
export interface CommonResponsePageUserVo {
  /**
   *
   * @type {number}
   * @memberof CommonResponsePageUserVo
   */
  code?: number
  /**
   *
   * @type {PageUserVo}
   * @memberof CommonResponsePageUserVo
   */
  data?: PageUserVo
  /**
   *
   * @type {string}
   * @memberof CommonResponsePageUserVo
   */
  message?: string
}
/**
 *
 * @export
 * @interface CommonResponseString
 */
export interface CommonResponseString {
  /**
   *
   * @type {number}
   * @memberof CommonResponseString
   */
  code?: number
  /**
   *
   * @type {string}
   * @memberof CommonResponseString
   */
  data?: string
  /**
   *
   * @type {string}
   * @memberof CommonResponseString
   */
  message?: string
}
/**
 *
 * @export
 * @interface CommonResponseUser
 */
export interface CommonResponseUser {
  /**
   *
   * @type {number}
   * @memberof CommonResponseUser
   */
  code?: number
  /**
   *
   * @type {User}
   * @memberof CommonResponseUser
   */
  data?: User
  /**
   *
   * @type {string}
   * @memberof CommonResponseUser
   */
  message?: string
}
/**
 *
 * @export
 * @interface CommonResponseUserVo
 */
export interface CommonResponseUserVo {
  /**
   *
   * @type {number}
   * @memberof CommonResponseUserVo
   */
  code?: number
  /**
   *
   * @type {UserVo}
   * @memberof CommonResponseUserVo
   */
  data?: UserVo
  /**
   *
   * @type {string}
   * @memberof CommonResponseUserVo
   */
  message?: string
}
/**
 *
 * @export
 * @interface DeleteRequest
 */
export interface DeleteRequest {
  /**
   *
   * @type {number}
   * @memberof DeleteRequest
   */
  id?: number
}
/**
 *
 * @export
 * @interface LoginUserVo
 */
export interface LoginUserVo {
  /**
   *
   * @type {number}
   * @memberof LoginUserVo
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof LoginUserVo
   */
  userAccount?: string
  /**
   *
   * @type {string}
   * @memberof LoginUserVo
   */
  userName?: string
  /**
   *
   * @type {string}
   * @memberof LoginUserVo
   */
  userAvatar?: string
  /**
   *
   * @type {string}
   * @memberof LoginUserVo
   */
  userProfile?: string
  /**
   *
   * @type {string}
   * @memberof LoginUserVo
   */
  userRole?: string
}
/**
 *
 * @export
 * @interface PageUserVo
 */
export interface PageUserVo {
  /**
   *
   * @type {Array<UserVo>}
   * @memberof PageUserVo
   */
  records?: Array<UserVo>
  /**
   *
   * @type {number}
   * @memberof PageUserVo
   */
  total?: number
  /**
   *
   * @type {number}
   * @memberof PageUserVo
   */
  size?: number
  /**
   *
   * @type {number}
   * @memberof PageUserVo
   */
  current?: number
  /**
   *
   * @type {Array<OrderItem>}
   * @memberof PageUserVo
   */
  orders?: Array<String>
  /**
   *
   * @type {any}
   * @memberof PageUserVo
   */
  optimizeCountSql?: any
  /**
   *
   * @type {any}
   * @memberof PageUserVo
   */
  searchCount?: any
  /**
   *
   * @type {boolean}
   * @memberof PageUserVo
   */
  optimizeJoinOfCountSql?: boolean
  /**
   *
   * @type {number}
   * @memberof PageUserVo
   */
  maxLimit?: number
  /**
   *
   * @type {string}
   * @memberof PageUserVo
   */
  countId?: string
  /**
   *
   * @type {number}
   * @memberof PageUserVo
   */
  pages?: number
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {number}
   * @memberof User
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof User
   */
  userAccount?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  userPassword?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  userName?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  userAvatar?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  userProfile?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  userRole?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  createTime?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  updateTime?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  editTime?: string
  /**
   *
   * @type {number}
   * @memberof User
   */
  isDelete?: number
}
/**
 *
 * @export
 * @interface UserAddRequest
 */
export interface UserAddRequest {
  /**
   *
   * @type {string}
   * @memberof UserAddRequest
   */
  userAccount?: string
  /**
   *
   * @type {string}
   * @memberof UserAddRequest
   */
  userName?: string
  /**
   *
   * @type {string}
   * @memberof UserAddRequest
   */
  userAvatar?: string
  /**
   *
   * @type {string}
   * @memberof UserAddRequest
   */
  userProfile?: string
  /**
   *
   * @type {string}
   * @memberof UserAddRequest
   */
  userRole?: string
}
/**
 *
 * @export
 * @interface UserLoginRequest
 */
export interface UserLoginRequest {
  /**
   *
   * @type {string}
   * @memberof UserLoginRequest
   */
  userAccount?: string
  /**
   *
   * @type {string}
   * @memberof UserLoginRequest
   */
  userPassword?: string
}
/**
 *
 * @export
 * @interface UserQueryRequest
 */
export interface UserQueryRequest {
  /**
   *
   * @type {number}
   * @memberof UserQueryRequest
   */
  current?: number
  /**
   *
   * @type {number}
   * @memberof UserQueryRequest
   */
  pageSize?: number
  /**
   *
   * @type {string}
   * @memberof UserQueryRequest
   */
  sortField?: string
  /**
   *
   * @type {string}
   * @memberof UserQueryRequest
   */
  sortOrder?: string
  /**
   *
   * @type {number}
   * @memberof UserQueryRequest
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof UserQueryRequest
   */
  userAccount?: string
  /**
   *
   * @type {string}
   * @memberof UserQueryRequest
   */
  userName?: string
  /**
   *
   * @type {string}
   * @memberof UserQueryRequest
   */
  userRole?: string
  /**
   *
   * @type {string}
   * @memberof UserQueryRequest
   */
  createTime?: string
  /**
   *
   * @type {string}
   * @memberof UserQueryRequest
   */
  updateTime?: string
}
/**
 *
 * @export
 * @interface UserRegisterRequest
 */
export interface UserRegisterRequest {
  /**
   *
   * @type {string}
   * @memberof UserRegisterRequest
   */
  userAccount?: string
  /**
   *
   * @type {string}
   * @memberof UserRegisterRequest
   */
  userPassword?: string
  /**
   *
   * @type {string}
   * @memberof UserRegisterRequest
   */
  checkPassword?: string
}
/**
 *
 * @export
 * @interface UserUpdateRequest
 */
export interface UserUpdateRequest {
  /**
   *
   * @type {number}
   * @memberof UserUpdateRequest
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof UserUpdateRequest
   */
  userAccount?: string
  /**
   *
   * @type {string}
   * @memberof UserUpdateRequest
   */
  userPassword?: string
  /**
   *
   * @type {string}
   * @memberof UserUpdateRequest
   */
  userName?: string
  /**
   *
   * @type {string}
   * @memberof UserUpdateRequest
   */
  userAvatar?: string
  /**
   *
   * @type {string}
   * @memberof UserUpdateRequest
   */
  userProfile?: string
  /**
   *
   * @type {string}
   * @memberof UserUpdateRequest
   */
  userRole?: string
}
/**
 *
 * @export
 * @interface UserVo
 */
export interface UserVo {
  /**
   *
   * @type {number}
   * @memberof UserVo
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof UserVo
   */
  userAccount?: string
  /**
   *
   * @type {string}
   * @memberof UserVo
   */
  userName?: string
  /**
   *
   * @type {string}
   * @memberof UserVo
   */
  userAvatar?: string
  /**
   *
   * @type {string}
   * @memberof UserVo
   */
  userProfile?: string
  /**
   *
   * @type {string}
   * @memberof UserVo
   */
  userRole?: string
  /**
   *
   * @type {string}
   * @memberof UserVo
   */
  createTime?: string
}

/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {DeleteRequest} deleteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: async (
      deleteRequest: DeleteRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deleteRequest' is not null or undefined
      assertParamExists('deleteUser', 'deleteRequest', deleteRequest)
      const localVarPath = `/user`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLoginUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/user/login`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getUserById', 'id', id)
      const localVarPath = `/user/full-info`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserVoById: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getUserVoById', 'id', id)
      const localVarPath = `/user/vo`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (id !== undefined) {
        localVarQueryParameter['id'] = id
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {UserQueryRequest} userQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUser: async (
      userQueryRequest: UserQueryRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userQueryRequest' is not null or undefined
      assertParamExists('listUser', 'userQueryRequest', userQueryRequest)
      const localVarPath = `/user/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        userQueryRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {UserUpdateRequest} userUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: async (
      userUpdateRequest: UserUpdateRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userUpdateRequest' is not null or undefined
      assertParamExists('updateUser', 'userUpdateRequest', userUpdateRequest)
      const localVarPath = `/user`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        userUpdateRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {UserAddRequest} userAddRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userAdd: async (
      userAddRequest: UserAddRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userAddRequest' is not null or undefined
      assertParamExists('userAdd', 'userAddRequest', userAddRequest)
      const localVarPath = `/user/add`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        userAddRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {UserLoginRequest} userLoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userLogin: async (
      userLoginRequest: UserLoginRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLoginRequest' is not null or undefined
      assertParamExists('userLogin', 'userLoginRequest', userLoginRequest)
      const localVarPath = `/user/login`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        userLoginRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userLogout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/user/logout`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {UserRegisterRequest} userRegisterRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userRegister: async (
      userRegisterRequest: UserRegisterRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userRegisterRequest' is not null or undefined
      assertParamExists('userRegister', 'userRegisterRequest', userRegisterRequest)
      const localVarPath = `/user/register`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        userRegisterRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {DeleteRequest} deleteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUser(
      deleteRequest: DeleteRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseString>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(deleteRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserControllerApi.deleteUser']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLoginUser(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseLoginUserVo>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getLoginUser(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserControllerApi.getLoginUser']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserById(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseUser>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserControllerApi.getUserById']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserVoById(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseUserVo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserVoById(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserControllerApi.getUserVoById']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {UserQueryRequest} userQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listUser(
      userQueryRequest: UserQueryRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponsePageUserVo>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listUser(userQueryRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserControllerApi.listUser']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {UserUpdateRequest} userUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUser(
      userUpdateRequest: UserUpdateRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseString>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(
        userUpdateRequest,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserControllerApi.updateUser']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {UserAddRequest} userAddRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userAdd(
      userAddRequest: UserAddRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseLong>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userAdd(userAddRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserControllerApi.userAdd']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {UserLoginRequest} userLoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userLogin(
      userLoginRequest: UserLoginRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseLoginUserVo>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userLogin(userLoginRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserControllerApi.userLogin']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userLogout(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseString>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userLogout(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserControllerApi.userLogout']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {UserRegisterRequest} userRegisterRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userRegister(
      userRegisterRequest: UserRegisterRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseLong>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userRegister(
        userRegisterRequest,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserControllerApi.userRegister']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserControllerApiFp(configuration)
  return {
    /**
     *
     * @param {DeleteRequest} deleteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(
      deleteRequest: DeleteRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<CommonResponseString> {
      return localVarFp
        .deleteUser(deleteRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLoginUser(options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseLoginUserVo> {
      return localVarFp.getLoginUser(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseUser> {
      return localVarFp.getUserById(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserVoById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseUserVo> {
      return localVarFp.getUserVoById(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {UserQueryRequest} userQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUser(
      userQueryRequest: UserQueryRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<CommonResponsePageUserVo> {
      return localVarFp
        .listUser(userQueryRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {UserUpdateRequest} userUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(
      userUpdateRequest: UserUpdateRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<CommonResponseString> {
      return localVarFp
        .updateUser(userUpdateRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {UserAddRequest} userAddRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userAdd(
      userAddRequest: UserAddRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<CommonResponseLong> {
      return localVarFp.userAdd(userAddRequest, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {UserLoginRequest} userLoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userLogin(
      userLoginRequest: UserLoginRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<CommonResponseLoginUserVo> {
      return localVarFp
        .userLogin(userLoginRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userLogout(options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseString> {
      return localVarFp.userLogout(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {UserRegisterRequest} userRegisterRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userRegister(
      userRegisterRequest: UserRegisterRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<CommonResponseLong> {
      return localVarFp
        .userRegister(userRegisterRequest, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
  /**
   *
   * @param {DeleteRequest} deleteRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public deleteUser(deleteRequest: DeleteRequest, options?: RawAxiosRequestConfig) {
    return UserControllerApiFp(this.configuration)
      .deleteUser(deleteRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public getLoginUser(options?: RawAxiosRequestConfig) {
    return UserControllerApiFp(this.configuration)
      .getLoginUser(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public getUserById(id: number, options?: RawAxiosRequestConfig) {
    return UserControllerApiFp(this.configuration)
      .getUserById(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public getUserVoById(id: number, options?: RawAxiosRequestConfig) {
    return UserControllerApiFp(this.configuration)
      .getUserVoById(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {UserQueryRequest} userQueryRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public listUser(userQueryRequest: UserQueryRequest, options?: RawAxiosRequestConfig) {
    return UserControllerApiFp(this.configuration)
      .listUser(userQueryRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {UserUpdateRequest} userUpdateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public updateUser(userUpdateRequest: UserUpdateRequest, options?: RawAxiosRequestConfig) {
    return UserControllerApiFp(this.configuration)
      .updateUser(userUpdateRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {UserAddRequest} userAddRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public userAdd(userAddRequest: UserAddRequest, options?: RawAxiosRequestConfig) {
    return UserControllerApiFp(this.configuration)
      .userAdd(userAddRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {UserLoginRequest} userLoginRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public userLogin(userLoginRequest: UserLoginRequest, options?: RawAxiosRequestConfig) {
    return UserControllerApiFp(this.configuration)
      .userLogin(userLoginRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public userLogout(options?: RawAxiosRequestConfig) {
    return UserControllerApiFp(this.configuration)
      .userLogout(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {UserRegisterRequest} userRegisterRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public userRegister(userRegisterRequest: UserRegisterRequest, options?: RawAxiosRequestConfig) {
    return UserControllerApiFp(this.configuration)
      .userRegister(userRegisterRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
