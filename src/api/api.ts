/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CommonResponseBoolean
 */
export interface CommonResponseBoolean {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseBoolean
     */
    'code'?: number;
    /**
     * return data
     * @type {boolean}
     * @memberof CommonResponseBoolean
     */
    'data'?: boolean;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseBoolean
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseCreateOutPaintingTaskResponse
 */
export interface CommonResponseCreateOutPaintingTaskResponse {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseCreateOutPaintingTaskResponse
     */
    'code'?: number;
    /**
     * return data
     * @type {CreateOutPaintingTaskResponse}
     * @memberof CommonResponseCreateOutPaintingTaskResponse
     */
    'data'?: CreateOutPaintingTaskResponse;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseCreateOutPaintingTaskResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseInteger
 */
export interface CommonResponseInteger {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseInteger
     */
    'code'?: number;
    /**
     * return data
     * @type {number}
     * @memberof CommonResponseInteger
     */
    'data'?: number;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseInteger
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseListImageSearchResult
 */
export interface CommonResponseListImageSearchResult {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseListImageSearchResult
     */
    'code'?: number;
    /**
     * return data
     * @type {Array<ImageSearchResult>}
     * @memberof CommonResponseListImageSearchResult
     */
    'data'?: Array<ImageSearchResult>;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseListImageSearchResult
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseListPictureVo
 */
export interface CommonResponseListPictureVo {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseListPictureVo
     */
    'code'?: number;
    /**
     * return data
     * @type {Array<PictureVo>}
     * @memberof CommonResponseListPictureVo
     */
    'data'?: Array<PictureVo>;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseListPictureVo
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseListSpaceCategoryAnalyzeResponse
 */
export interface CommonResponseListSpaceCategoryAnalyzeResponse {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseListSpaceCategoryAnalyzeResponse
     */
    'code'?: number;
    /**
     * return data
     * @type {Array<SpaceCategoryAnalyzeResponse>}
     * @memberof CommonResponseListSpaceCategoryAnalyzeResponse
     */
    'data'?: Array<SpaceCategoryAnalyzeResponse>;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseListSpaceCategoryAnalyzeResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseListSpaceLevel
 */
export interface CommonResponseListSpaceLevel {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseListSpaceLevel
     */
    'code'?: number;
    /**
     * return data
     * @type {Array<SpaceLevel>}
     * @memberof CommonResponseListSpaceLevel
     */
    'data'?: Array<SpaceLevel>;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseListSpaceLevel
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseListSpaceSizeAnalyzeResponse
 */
export interface CommonResponseListSpaceSizeAnalyzeResponse {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseListSpaceSizeAnalyzeResponse
     */
    'code'?: number;
    /**
     * return data
     * @type {Array<SpaceSizeAnalyzeResponse>}
     * @memberof CommonResponseListSpaceSizeAnalyzeResponse
     */
    'data'?: Array<SpaceSizeAnalyzeResponse>;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseListSpaceSizeAnalyzeResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseListSpaceTagAnalyzeResponse
 */
export interface CommonResponseListSpaceTagAnalyzeResponse {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseListSpaceTagAnalyzeResponse
     */
    'code'?: number;
    /**
     * return data
     * @type {Array<SpaceTagAnalyzeResponse>}
     * @memberof CommonResponseListSpaceTagAnalyzeResponse
     */
    'data'?: Array<SpaceTagAnalyzeResponse>;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseListSpaceTagAnalyzeResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseListSpaceUserAnalyzeResponse
 */
export interface CommonResponseListSpaceUserAnalyzeResponse {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseListSpaceUserAnalyzeResponse
     */
    'code'?: number;
    /**
     * return data
     * @type {Array<SpaceUserAnalyzeResponse>}
     * @memberof CommonResponseListSpaceUserAnalyzeResponse
     */
    'data'?: Array<SpaceUserAnalyzeResponse>;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseListSpaceUserAnalyzeResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseListSpaceUserVo
 */
export interface CommonResponseListSpaceUserVo {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseListSpaceUserVo
     */
    'code'?: number;
    /**
     * return data
     * @type {Array<SpaceUserVo>}
     * @memberof CommonResponseListSpaceUserVo
     */
    'data'?: Array<SpaceUserVo>;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseListSpaceUserVo
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseListSpaceVo
 */
export interface CommonResponseListSpaceVo {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseListSpaceVo
     */
    'code'?: number;
    /**
     * return data
     * @type {Array<SpaceVo>}
     * @memberof CommonResponseListSpaceVo
     */
    'data'?: Array<SpaceVo>;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseListSpaceVo
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseLoginUserVo
 */
export interface CommonResponseLoginUserVo {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseLoginUserVo
     */
    'code'?: number;
    /**
     * return data
     * @type {LoginUserVo}
     * @memberof CommonResponseLoginUserVo
     */
    'data'?: LoginUserVo;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseLoginUserVo
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseLong
 */
export interface CommonResponseLong {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseLong
     */
    'code'?: number;
    /**
     * return data
     * @type {number}
     * @memberof CommonResponseLong
     */
    'data'?: number;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseLong
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseOutPaintingTaskStatusResponse
 */
export interface CommonResponseOutPaintingTaskStatusResponse {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseOutPaintingTaskStatusResponse
     */
    'code'?: number;
    /**
     * return data
     * @type {OutPaintingTaskStatusResponse}
     * @memberof CommonResponseOutPaintingTaskStatusResponse
     */
    'data'?: OutPaintingTaskStatusResponse;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseOutPaintingTaskStatusResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponsePagePictureVo
 */
export interface CommonResponsePagePictureVo {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponsePagePictureVo
     */
    'code'?: number;
    /**
     * return data
     * @type {PagePictureVo}
     * @memberof CommonResponsePagePictureVo
     */
    'data'?: PagePictureVo;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponsePagePictureVo
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponsePageSpaceVo
 */
export interface CommonResponsePageSpaceVo {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponsePageSpaceVo
     */
    'code'?: number;
    /**
     * return data
     * @type {PageSpaceVo}
     * @memberof CommonResponsePageSpaceVo
     */
    'data'?: PageSpaceVo;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponsePageSpaceVo
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponsePageUserVo
 */
export interface CommonResponsePageUserVo {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponsePageUserVo
     */
    'code'?: number;
    /**
     * return data
     * @type {PageUserVo}
     * @memberof CommonResponsePageUserVo
     */
    'data'?: PageUserVo;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponsePageUserVo
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponsePicture
 */
export interface CommonResponsePicture {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponsePicture
     */
    'code'?: number;
    /**
     * return data
     * @type {Picture}
     * @memberof CommonResponsePicture
     */
    'data'?: Picture;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponsePicture
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponsePictureTagCategory
 */
export interface CommonResponsePictureTagCategory {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponsePictureTagCategory
     */
    'code'?: number;
    /**
     * return data
     * @type {PictureTagCategory}
     * @memberof CommonResponsePictureTagCategory
     */
    'data'?: PictureTagCategory;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponsePictureTagCategory
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponsePictureVo
 */
export interface CommonResponsePictureVo {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponsePictureVo
     */
    'code'?: number;
    /**
     * return data
     * @type {PictureVo}
     * @memberof CommonResponsePictureVo
     */
    'data'?: PictureVo;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponsePictureVo
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseSpaceUsageAnalyzeResponse
 */
export interface CommonResponseSpaceUsageAnalyzeResponse {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseSpaceUsageAnalyzeResponse
     */
    'code'?: number;
    /**
     * return data
     * @type {SpaceUsageAnalyzeResponse}
     * @memberof CommonResponseSpaceUsageAnalyzeResponse
     */
    'data'?: SpaceUsageAnalyzeResponse;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseSpaceUsageAnalyzeResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseSpaceUserVo
 */
export interface CommonResponseSpaceUserVo {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseSpaceUserVo
     */
    'code'?: number;
    /**
     * return data
     * @type {SpaceUserVo}
     * @memberof CommonResponseSpaceUserVo
     */
    'data'?: SpaceUserVo;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseSpaceUserVo
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseSpaceVo
 */
export interface CommonResponseSpaceVo {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseSpaceVo
     */
    'code'?: number;
    /**
     * return data
     * @type {SpaceVo}
     * @memberof CommonResponseSpaceVo
     */
    'data'?: SpaceVo;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseSpaceVo
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseString
 */
export interface CommonResponseString {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseString
     */
    'code'?: number;
    /**
     * return data
     * @type {string}
     * @memberof CommonResponseString
     */
    'data'?: string;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseString
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseUser
 */
export interface CommonResponseUser {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseUser
     */
    'code'?: number;
    /**
     * return data
     * @type {User}
     * @memberof CommonResponseUser
     */
    'data'?: User;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseUser
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CommonResponseUserVo
 */
export interface CommonResponseUserVo {
    /**
     * return status code
     * @type {number}
     * @memberof CommonResponseUserVo
     */
    'code'?: number;
    /**
     * return data
     * @type {UserVo}
     * @memberof CommonResponseUserVo
     */
    'data'?: UserVo;
    /**
     * return message
     * @type {string}
     * @memberof CommonResponseUserVo
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface CreateOutPaintingTaskResponse
 */
export interface CreateOutPaintingTaskResponse {
    /**
     * 
     * @type {Output}
     * @memberof CreateOutPaintingTaskResponse
     */
    'output'?: Output;
    /**
     * 
     * @type {string}
     * @memberof CreateOutPaintingTaskResponse
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOutPaintingTaskResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOutPaintingTaskResponse
     */
    'requestId'?: string;
}
/**
 * 
 * @export
 * @interface DeleteRequest
 */
export interface DeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DeleteRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface ImageSearchResult
 */
export interface ImageSearchResult {
    /**
     * 缩略图url
     * @type {string}
     * @memberof ImageSearchResult
     */
    'thumbUrl'?: string;
    /**
     * trest
     * @type {string}
     * @memberof ImageSearchResult
     */
    'fromUrl'?: string;
}
/**
 * 
 * @export
 * @interface LoginUserVo
 */
export interface LoginUserVo {
    /**
     * 
     * @type {string}
     * @memberof LoginUserVo
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginUserVo
     */
    'userAccount'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginUserVo
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginUserVo
     */
    'userAvatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginUserVo
     */
    'userProfile'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginUserVo
     */
    'userRole'?: string;
}
/**
 * 
 * @export
 * @interface OrderItem
 */
export interface OrderItem {
    /**
     * 
     * @type {string}
     * @memberof OrderItem
     */
    'column'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OrderItem
     */
    'asc'?: boolean;
}
/**
 * 
 * @export
 * @interface OutPaintingTaskStatusResponse
 */
export interface OutPaintingTaskStatusResponse {
    /**
     * 
     * @type {string}
     * @memberof OutPaintingTaskStatusResponse
     */
    'requestId'?: string;
    /**
     * 
     * @type {Output}
     * @memberof OutPaintingTaskStatusResponse
     */
    'output'?: Output;
}
/**
 * 
 * @export
 * @interface Output
 */
export interface Output {
    /**
     * 
     * @type {string}
     * @memberof Output
     */
    'taskId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Output
     */
    'taskStatus'?: string;
}
/**
 * 
 * @export
 * @interface PagePictureVo
 */
export interface PagePictureVo {
    /**
     * 
     * @type {Array<PictureVo>}
     * @memberof PagePictureVo
     */
    'records'?: Array<PictureVo>;
    /**
     * 
     * @type {number}
     * @memberof PagePictureVo
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof PagePictureVo
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof PagePictureVo
     */
    'current'?: number;
    /**
     * 
     * @type {Array<OrderItem>}
     * @memberof PagePictureVo
     */
    'orders'?: Array<OrderItem>;
    /**
     * 
     * @type {any}
     * @memberof PagePictureVo
     */
    'optimizeCountSql'?: any;
    /**
     * 
     * @type {any}
     * @memberof PagePictureVo
     */
    'searchCount'?: any;
    /**
     * 
     * @type {boolean}
     * @memberof PagePictureVo
     */
    'optimizeJoinOfCountSql'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PagePictureVo
     */
    'maxLimit'?: number;
    /**
     * 
     * @type {string}
     * @memberof PagePictureVo
     */
    'countId'?: string;
    /**
     * 
     * @type {number}
     * @memberof PagePictureVo
     */
    'pages'?: number;
}
/**
 * 
 * @export
 * @interface PageSpaceVo
 */
export interface PageSpaceVo {
    /**
     * 
     * @type {Array<SpaceVo>}
     * @memberof PageSpaceVo
     */
    'records'?: Array<SpaceVo>;
    /**
     * 
     * @type {number}
     * @memberof PageSpaceVo
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageSpaceVo
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageSpaceVo
     */
    'current'?: number;
    /**
     * 
     * @type {Array<OrderItem>}
     * @memberof PageSpaceVo
     */
    'orders'?: Array<OrderItem>;
    /**
     * 
     * @type {any}
     * @memberof PageSpaceVo
     */
    'optimizeCountSql'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageSpaceVo
     */
    'searchCount'?: any;
    /**
     * 
     * @type {boolean}
     * @memberof PageSpaceVo
     */
    'optimizeJoinOfCountSql'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageSpaceVo
     */
    'maxLimit'?: number;
    /**
     * 
     * @type {string}
     * @memberof PageSpaceVo
     */
    'countId'?: string;
    /**
     * 
     * @type {number}
     * @memberof PageSpaceVo
     */
    'pages'?: number;
}
/**
 * 
 * @export
 * @interface PageUserVo
 */
export interface PageUserVo {
    /**
     * 
     * @type {Array<UserVo>}
     * @memberof PageUserVo
     */
    'records'?: Array<UserVo>;
    /**
     * 
     * @type {number}
     * @memberof PageUserVo
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageUserVo
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageUserVo
     */
    'current'?: number;
    /**
     * 
     * @type {Array<OrderItem>}
     * @memberof PageUserVo
     */
    'orders'?: Array<OrderItem>;
    /**
     * 
     * @type {any}
     * @memberof PageUserVo
     */
    'optimizeCountSql'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageUserVo
     */
    'searchCount'?: any;
    /**
     * 
     * @type {boolean}
     * @memberof PageUserVo
     */
    'optimizeJoinOfCountSql'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageUserVo
     */
    'maxLimit'?: number;
    /**
     * 
     * @type {string}
     * @memberof PageUserVo
     */
    'countId'?: string;
    /**
     * 
     * @type {number}
     * @memberof PageUserVo
     */
    'pages'?: number;
}
/**
 * 
 * @export
 * @interface Parameters
 */
export interface Parameters {
    /**
     * 
     * @type {number}
     * @memberof Parameters
     */
    'angle'?: number;
    /**
     * 
     * @type {string}
     * @memberof Parameters
     */
    'outputRatio'?: string;
    /**
     * 
     * @type {number}
     * @memberof Parameters
     */
    'topOffset'?: number;
    /**
     * 
     * @type {number}
     * @memberof Parameters
     */
    'bottomOffset'?: number;
    /**
     * 
     * @type {number}
     * @memberof Parameters
     */
    'leftOffset'?: number;
    /**
     * 
     * @type {number}
     * @memberof Parameters
     */
    'rightOffset'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Parameters
     */
    'bestQuality'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Parameters
     */
    'limitImageSize'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Parameters
     */
    'addWatermark'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Parameters
     */
    'xScale'?: number;
    /**
     * 
     * @type {number}
     * @memberof Parameters
     */
    'yScale'?: number;
}
/**
 * 
 * @export
 * @interface Picture
 */
export interface Picture {
    /**
     * 
     * @type {number}
     * @memberof Picture
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Picture
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Picture
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Picture
     */
    'introduction'?: string;
    /**
     * 
     * @type {string}
     * @memberof Picture
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof Picture
     */
    'tags'?: string;
    /**
     * 
     * @type {number}
     * @memberof Picture
     */
    'picSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof Picture
     */
    'picWidth'?: number;
    /**
     * 
     * @type {number}
     * @memberof Picture
     */
    'picHeight'?: number;
    /**
     * 
     * @type {number}
     * @memberof Picture
     */
    'picScale'?: number;
    /**
     * 
     * @type {string}
     * @memberof Picture
     */
    'picFormat'?: string;
    /**
     * 
     * @type {number}
     * @memberof Picture
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Picture
     */
    'spaceId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Picture
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Picture
     */
    'editTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof Picture
     */
    'reviewStatus'?: number;
    /**
     * 
     * @type {string}
     * @memberof Picture
     */
    'reviewMessage'?: string;
    /**
     * 
     * @type {number}
     * @memberof Picture
     */
    'reviewerId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Picture
     */
    'reviewTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Picture
     */
    'thumbnailUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof Picture
     */
    'originalUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof Picture
     */
    'picColor'?: string;
    /**
     * 
     * @type {number}
     * @memberof Picture
     */
    'isDelete'?: number;
}
/**
 * 
 * @export
 * @interface PictureEditByBatchRequest
 */
export interface PictureEditByBatchRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof PictureEditByBatchRequest
     */
    'pictureIdList'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PictureEditByBatchRequest
     */
    'spaceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureEditByBatchRequest
     */
    'category'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PictureEditByBatchRequest
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PictureEditByBatchRequest
     */
    'nameRule'?: string;
}
/**
 * 
 * @export
 * @interface PictureEditRequest
 */
export interface PictureEditRequest {
    /**
     * 
     * @type {string}
     * @memberof PictureEditRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureEditRequest
     */
    'spaceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureEditRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureEditRequest
     */
    'introduction'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureEditRequest
     */
    'category'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PictureEditRequest
     */
    'tags'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PictureOutPaintingRequest
 */
export interface PictureOutPaintingRequest {
    /**
     * 
     * @type {string}
     * @memberof PictureOutPaintingRequest
     */
    'pictureId'?: string;
    /**
     * 
     * @type {Parameters}
     * @memberof PictureOutPaintingRequest
     */
    'parameters'?: Parameters;
}
/**
 * 
 * @export
 * @interface PictureQueryRequest
 */
export interface PictureQueryRequest {
    /**
     * 
     * @type {number}
     * @memberof PictureQueryRequest
     */
    'current'?: number;
    /**
     * 
     * @type {number}
     * @memberof PictureQueryRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof PictureQueryRequest
     */
    'sortField'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureQueryRequest
     */
    'sortOrder'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureQueryRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureQueryRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureQueryRequest
     */
    'introduction'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureQueryRequest
     */
    'category'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PictureQueryRequest
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PictureQueryRequest
     */
    'picSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PictureQueryRequest
     */
    'picWidth'?: number;
    /**
     * 
     * @type {number}
     * @memberof PictureQueryRequest
     */
    'picHeight'?: number;
    /**
     * 
     * @type {number}
     * @memberof PictureQueryRequest
     */
    'picScale'?: number;
    /**
     * 
     * @type {string}
     * @memberof PictureQueryRequest
     */
    'picFormat'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureQueryRequest
     */
    'searchText'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureQueryRequest
     */
    'userId'?: string;
    /**
     * 
     * @type {number}
     * @memberof PictureQueryRequest
     */
    'reviewStatus'?: number;
    /**
     * 
     * @type {string}
     * @memberof PictureQueryRequest
     */
    'reviewMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureQueryRequest
     */
    'reviewerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureQueryRequest
     */
    'spaceId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PictureQueryRequest
     */
    'publicSpace'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PictureQueryRequest
     */
    'startEditTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureQueryRequest
     */
    'endEditTime'?: string;
}
/**
 * 
 * @export
 * @interface PictureReviewRequest
 */
export interface PictureReviewRequest {
    /**
     * 
     * @type {string}
     * @memberof PictureReviewRequest
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof PictureReviewRequest
     */
    'reviewStatus'?: number;
    /**
     * 
     * @type {string}
     * @memberof PictureReviewRequest
     */
    'reviewMessage'?: string;
}
/**
 * 
 * @export
 * @interface PictureTagCategory
 */
export interface PictureTagCategory {
    /**
     * 
     * @type {Array<string>}
     * @memberof PictureTagCategory
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PictureTagCategory
     */
    'categories'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PictureUpdateRequest
 */
export interface PictureUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PictureUpdateRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureUpdateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureUpdateRequest
     */
    'introduction'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureUpdateRequest
     */
    'category'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PictureUpdateRequest
     */
    'tags'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PictureUploadByBatchRequest
 */
export interface PictureUploadByBatchRequest {
    /**
     * 
     * @type {string}
     * @memberof PictureUploadByBatchRequest
     */
    'searchText'?: string;
    /**
     * 
     * @type {number}
     * @memberof PictureUploadByBatchRequest
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PictureUploadByBatchRequest
     */
    'namePrefix'?: string;
}
/**
 * 
 * @export
 * @interface PictureUploadRequest
 */
export interface PictureUploadRequest {
    /**
     * 
     * @type {string}
     * @memberof PictureUploadRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureUploadRequest
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureUploadRequest
     */
    'picName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureUploadRequest
     */
    'spaceId'?: string;
}
/**
 * 
 * @export
 * @interface PictureVo
 */
export interface PictureVo {
    /**
     * 
     * @type {string}
     * @memberof PictureVo
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureVo
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureVo
     */
    'thumbnailUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureVo
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureVo
     */
    'introduction'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PictureVo
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PictureVo
     */
    'category'?: string;
    /**
     * 
     * @type {number}
     * @memberof PictureVo
     */
    'picSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof PictureVo
     */
    'picWidth'?: number;
    /**
     * 
     * @type {number}
     * @memberof PictureVo
     */
    'picHeight'?: number;
    /**
     * 
     * @type {number}
     * @memberof PictureVo
     */
    'picScale'?: number;
    /**
     * 
     * @type {string}
     * @memberof PictureVo
     */
    'picFormat'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureVo
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureVo
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureVo
     */
    'editTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof PictureVo
     */
    'reviewStatus'?: number;
    /**
     * 
     * @type {string}
     * @memberof PictureVo
     */
    'reviewMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureVo
     */
    'reviewerId'?: string;
    /**
     * 
     * @type {UserVo}
     * @memberof PictureVo
     */
    'user'?: UserVo;
    /**
     * 
     * @type {string}
     * @memberof PictureVo
     */
    'spaceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PictureVo
     */
    'picColor'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PictureVo
     */
    'permissions'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SearchPictureByColorRequest
 */
export interface SearchPictureByColorRequest {
    /**
     * 
     * @type {string}
     * @memberof SearchPictureByColorRequest
     */
    'picColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchPictureByColorRequest
     */
    'spaceId'?: string;
}
/**
 * 
 * @export
 * @interface SearchPictureByPictureRequest
 */
export interface SearchPictureByPictureRequest {
    /**
     * 
     * @type {string}
     * @memberof SearchPictureByPictureRequest
     */
    'pictureId'?: string;
}
/**
 * 
 * @export
 * @interface SpaceAddRequest
 */
export interface SpaceAddRequest {
    /**
     * 
     * @type {string}
     * @memberof SpaceAddRequest
     */
    'spaceName'?: string;
    /**
     * 
     * @type {number}
     * @memberof SpaceAddRequest
     */
    'spaceLevel'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpaceAddRequest
     */
    'spaceType'?: number;
}
/**
 * 
 * @export
 * @interface SpaceCategoryAnalyzeRequest
 */
export interface SpaceCategoryAnalyzeRequest {
    /**
     * 
     * @type {string}
     * @memberof SpaceCategoryAnalyzeRequest
     */
    'spaceId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SpaceCategoryAnalyzeRequest
     */
    'queryPublic'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SpaceCategoryAnalyzeRequest
     */
    'queryAll'?: boolean;
}
/**
 * 
 * @export
 * @interface SpaceCategoryAnalyzeResponse
 */
export interface SpaceCategoryAnalyzeResponse {
    /**
     * 
     * @type {string}
     * @memberof SpaceCategoryAnalyzeResponse
     */
    'category'?: string;
    /**
     * 
     * @type {number}
     * @memberof SpaceCategoryAnalyzeResponse
     */
    'count'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpaceCategoryAnalyzeResponse
     */
    'totalSize'?: number;
}
/**
 * 
 * @export
 * @interface SpaceEditRequest
 */
export interface SpaceEditRequest {
    /**
     * 
     * @type {string}
     * @memberof SpaceEditRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceEditRequest
     */
    'spaceName'?: string;
}
/**
 * Space level transfer entity
 * @export
 * @interface SpaceLevel
 */
export interface SpaceLevel {
    /**
     * 
     * @type {number}
     * @memberof SpaceLevel
     */
    'value'?: number;
    /**
     * 
     * @type {string}
     * @memberof SpaceLevel
     */
    'text'?: string;
    /**
     * 
     * @type {number}
     * @memberof SpaceLevel
     */
    'maxCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpaceLevel
     */
    'maxSize'?: number;
}
/**
 * 
 * @export
 * @interface SpaceQueryRequest
 */
export interface SpaceQueryRequest {
    /**
     * 
     * @type {number}
     * @memberof SpaceQueryRequest
     */
    'current'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpaceQueryRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof SpaceQueryRequest
     */
    'sortField'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceQueryRequest
     */
    'sortOrder'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceQueryRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceQueryRequest
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceQueryRequest
     */
    'spaceName'?: string;
    /**
     * 
     * @type {number}
     * @memberof SpaceQueryRequest
     */
    'spaceLevel'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpaceQueryRequest
     */
    'spaceType'?: number;
}
/**
 * 
 * @export
 * @interface SpaceRankAnalyzeRequest
 */
export interface SpaceRankAnalyzeRequest {
    /**
     * 
     * @type {number}
     * @memberof SpaceRankAnalyzeRequest
     */
    'topN'?: number;
}
/**
 * 
 * @export
 * @interface SpaceSizeAnalyzeRequest
 */
export interface SpaceSizeAnalyzeRequest {
    /**
     * 
     * @type {string}
     * @memberof SpaceSizeAnalyzeRequest
     */
    'spaceId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SpaceSizeAnalyzeRequest
     */
    'queryPublic'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SpaceSizeAnalyzeRequest
     */
    'queryAll'?: boolean;
}
/**
 * 
 * @export
 * @interface SpaceSizeAnalyzeResponse
 */
export interface SpaceSizeAnalyzeResponse {
    /**
     * 
     * @type {string}
     * @memberof SpaceSizeAnalyzeResponse
     */
    'sizeRange'?: string;
    /**
     * 
     * @type {number}
     * @memberof SpaceSizeAnalyzeResponse
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface SpaceTagAnalyzeRequest
 */
export interface SpaceTagAnalyzeRequest {
    /**
     * 
     * @type {string}
     * @memberof SpaceTagAnalyzeRequest
     */
    'spaceId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SpaceTagAnalyzeRequest
     */
    'queryPublic'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SpaceTagAnalyzeRequest
     */
    'queryAll'?: boolean;
}
/**
 * 
 * @export
 * @interface SpaceTagAnalyzeResponse
 */
export interface SpaceTagAnalyzeResponse {
    /**
     * 
     * @type {string}
     * @memberof SpaceTagAnalyzeResponse
     */
    'tag'?: string;
    /**
     * 
     * @type {number}
     * @memberof SpaceTagAnalyzeResponse
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface SpaceUpdateRequest
 */
export interface SpaceUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof SpaceUpdateRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceUpdateRequest
     */
    'spaceName'?: string;
    /**
     * 
     * @type {number}
     * @memberof SpaceUpdateRequest
     */
    'spaceLevel'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpaceUpdateRequest
     */
    'maxSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpaceUpdateRequest
     */
    'maxCount'?: number;
}
/**
 * 
 * @export
 * @interface SpaceUsageAnalyzeRequest
 */
export interface SpaceUsageAnalyzeRequest {
    /**
     * 
     * @type {string}
     * @memberof SpaceUsageAnalyzeRequest
     */
    'spaceId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SpaceUsageAnalyzeRequest
     */
    'queryPublic'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SpaceUsageAnalyzeRequest
     */
    'queryAll'?: boolean;
}
/**
 * 
 * @export
 * @interface SpaceUsageAnalyzeResponse
 */
export interface SpaceUsageAnalyzeResponse {
    /**
     * 
     * @type {number}
     * @memberof SpaceUsageAnalyzeResponse
     */
    'usedSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpaceUsageAnalyzeResponse
     */
    'maxSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpaceUsageAnalyzeResponse
     */
    'sizeUsageRatio'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpaceUsageAnalyzeResponse
     */
    'usedCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpaceUsageAnalyzeResponse
     */
    'maxCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpaceUsageAnalyzeResponse
     */
    'countUsageRatio'?: number;
}
/**
 * 
 * @export
 * @interface SpaceUserAddRequest
 */
export interface SpaceUserAddRequest {
    /**
     * 
     * @type {string}
     * @memberof SpaceUserAddRequest
     */
    'spaceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceUserAddRequest
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceUserAddRequest
     */
    'spaceRole'?: string;
}
/**
 * 
 * @export
 * @interface SpaceUserAnalyzeRequest
 */
export interface SpaceUserAnalyzeRequest {
    /**
     * 
     * @type {string}
     * @memberof SpaceUserAnalyzeRequest
     */
    'spaceId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SpaceUserAnalyzeRequest
     */
    'queryPublic'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SpaceUserAnalyzeRequest
     */
    'queryAll'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SpaceUserAnalyzeRequest
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceUserAnalyzeRequest
     */
    'timeDimension'?: string;
}
/**
 * 
 * @export
 * @interface SpaceUserAnalyzeResponse
 */
export interface SpaceUserAnalyzeResponse {
    /**
     * 
     * @type {string}
     * @memberof SpaceUserAnalyzeResponse
     */
    'period'?: string;
    /**
     * 
     * @type {number}
     * @memberof SpaceUserAnalyzeResponse
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface SpaceUserEditRequest
 */
export interface SpaceUserEditRequest {
    /**
     * 
     * @type {string}
     * @memberof SpaceUserEditRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceUserEditRequest
     */
    'spaceRole'?: string;
}
/**
 * 
 * @export
 * @interface SpaceUserQueryRequest
 */
export interface SpaceUserQueryRequest {
    /**
     * 
     * @type {string}
     * @memberof SpaceUserQueryRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceUserQueryRequest
     */
    'spaceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceUserQueryRequest
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceUserQueryRequest
     */
    'spaceRole'?: string;
}
/**
 * 
 * @export
 * @interface SpaceUserVo
 */
export interface SpaceUserVo {
    /**
     * 
     * @type {string}
     * @memberof SpaceUserVo
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceUserVo
     */
    'spaceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceUserVo
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceUserVo
     */
    'spaceRole'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceUserVo
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceUserVo
     */
    'updateTime'?: string;
    /**
     * 
     * @type {UserVo}
     * @memberof SpaceUserVo
     */
    'user'?: UserVo;
    /**
     * 
     * @type {SpaceVo}
     * @memberof SpaceUserVo
     */
    'space'?: SpaceVo;
}
/**
 * 
 * @export
 * @interface SpaceVo
 */
export interface SpaceVo {
    /**
     * 
     * @type {string}
     * @memberof SpaceVo
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceVo
     */
    'spaceName'?: string;
    /**
     * 
     * @type {number}
     * @memberof SpaceVo
     */
    'spaceLevel'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpaceVo
     */
    'maxSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpaceVo
     */
    'maxCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpaceVo
     */
    'totalSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof SpaceVo
     */
    'totalCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof SpaceVo
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceVo
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceVo
     */
    'editTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpaceVo
     */
    'updateTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof SpaceVo
     */
    'spaceType'?: number;
    /**
     * 
     * @type {UserVo}
     * @memberof SpaceVo
     */
    'user'?: UserVo;
    /**
     * 
     * @type {Array<string>}
     * @memberof SpaceVo
     */
    'permissions'?: Array<string>;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'userAccount'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'userPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'userAvatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'userProfile'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'userRole'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updateTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'editTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'isDelete'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'admin'?: boolean;
}
/**
 * 
 * @export
 * @interface UserAddRequest
 */
export interface UserAddRequest {
    /**
     * 
     * @type {string}
     * @memberof UserAddRequest
     */
    'userAccount'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAddRequest
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAddRequest
     */
    'userAvatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAddRequest
     */
    'userProfile'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserAddRequest
     */
    'userRole'?: string;
}
/**
 * 
 * @export
 * @interface UserLoginRequest
 */
export interface UserLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof UserLoginRequest
     */
    'userAccount'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginRequest
     */
    'userPassword'?: string;
}
/**
 * 
 * @export
 * @interface UserQueryRequest
 */
export interface UserQueryRequest {
    /**
     * 
     * @type {number}
     * @memberof UserQueryRequest
     */
    'current'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserQueryRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserQueryRequest
     */
    'sortField'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserQueryRequest
     */
    'sortOrder'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserQueryRequest
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserQueryRequest
     */
    'userAccount'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserQueryRequest
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserQueryRequest
     */
    'userRole'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserQueryRequest
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserQueryRequest
     */
    'updateTime'?: string;
}
/**
 * 
 * @export
 * @interface UserRegisterRequest
 */
export interface UserRegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof UserRegisterRequest
     */
    'userAccount'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterRequest
     */
    'userPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterRequest
     */
    'checkPassword'?: string;
}
/**
 * 
 * @export
 * @interface UserUpdateRequest
 */
export interface UserUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequest
     */
    'userAccount'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequest
     */
    'userPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequest
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequest
     */
    'userAvatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequest
     */
    'userProfile'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequest
     */
    'userRole'?: string;
}
/**
 * 
 * @export
 * @interface UserVo
 */
export interface UserVo {
    /**
     * 
     * @type {string}
     * @memberof UserVo
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVo
     */
    'userAccount'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVo
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVo
     */
    'userAvatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVo
     */
    'userProfile'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVo
     */
    'userRole'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserVo
     */
    'createTime'?: string;
}

/**
 * PictureControllerApi - axios parameter creator
 * @export
 */
export const PictureControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PictureOutPaintingRequest} pictureOutPaintingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPictureOutPaintingTask: async (pictureOutPaintingRequest: PictureOutPaintingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pictureOutPaintingRequest' is not null or undefined
            assertParamExists('createPictureOutPaintingTask', 'pictureOutPaintingRequest', pictureOutPaintingRequest)
            const localVarPath = `/picture/out-painting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pictureOutPaintingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteRequest} deleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePicture: async (deleteRequest: DeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteRequest' is not null or undefined
            assertParamExists('deletePicture', 'deleteRequest', deleteRequest)
            const localVarPath = `/picture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PictureReviewRequest} pictureReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doPictureReview: async (pictureReviewRequest: PictureReviewRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pictureReviewRequest' is not null or undefined
            assertParamExists('doPictureReview', 'pictureReviewRequest', pictureReviewRequest)
            const localVarPath = `/picture/review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pictureReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PictureEditRequest} pictureEditRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPicture: async (pictureEditRequest: PictureEditRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pictureEditRequest' is not null or undefined
            assertParamExists('editPicture', 'pictureEditRequest', pictureEditRequest)
            const localVarPath = `/picture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pictureEditRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PictureEditByBatchRequest} pictureEditByBatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPictureByBatch: async (pictureEditByBatchRequest: PictureEditByBatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pictureEditByBatchRequest' is not null or undefined
            assertParamExists('editPictureByBatch', 'pictureEditByBatchRequest', pictureEditByBatchRequest)
            const localVarPath = `/picture/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pictureEditByBatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPictureById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPictureById', 'id', id)
            const localVarPath = `/picture/full`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPictureOutPaintingTaskStatus: async (taskId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getPictureOutPaintingTaskStatus', 'taskId', taskId)
            const localVarPath = `/picture/out-painting/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPictureVoById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPictureVoById', 'id', id)
            const localVarPath = `/picture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PictureQueryRequest} pictureQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPictureByPage: async (pictureQueryRequest: PictureQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pictureQueryRequest' is not null or undefined
            assertParamExists('listPictureByPage', 'pictureQueryRequest', pictureQueryRequest)
            const localVarPath = `/picture/full/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pictureQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPictureTagCategory: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/picture/tag-category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PictureQueryRequest} pictureQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPictureVoByPage: async (pictureQueryRequest: PictureQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pictureQueryRequest' is not null or undefined
            assertParamExists('listPictureVoByPage', 'pictureQueryRequest', pictureQueryRequest)
            const localVarPath = `/picture/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pictureQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SearchPictureByColorRequest} searchPictureByColorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPictureByColor: async (searchPictureByColorRequest: SearchPictureByColorRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchPictureByColorRequest' is not null or undefined
            assertParamExists('searchPictureByColor', 'searchPictureByColorRequest', searchPictureByColorRequest)
            const localVarPath = `/picture/search/color`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchPictureByColorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search picture by picture
         * @param {SearchPictureByPictureRequest} searchPictureByPictureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPictureByPicture: async (searchPictureByPictureRequest: SearchPictureByPictureRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchPictureByPictureRequest' is not null or undefined
            assertParamExists('searchPictureByPicture', 'searchPictureByPictureRequest', searchPictureByPictureRequest)
            const localVarPath = `/picture/search/picture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchPictureByPictureRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PictureUpdateRequest} pictureUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePicture: async (pictureUpdateRequest: PictureUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pictureUpdateRequest' is not null or undefined
            assertParamExists('updatePicture', 'pictureUpdateRequest', pictureUpdateRequest)
            const localVarPath = `/picture/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pictureUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {File} file 
         * @param {string} [id] 
         * @param {string} [spaceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPicture: async (file: File, id?: string, spaceId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadPicture', 'file', file)
            const localVarPath = `/picture/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (spaceId !== undefined) {
                localVarQueryParameter['spaceId'] = spaceId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PictureUploadByBatchRequest} pictureUploadByBatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPictureByBatch: async (pictureUploadByBatchRequest: PictureUploadByBatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pictureUploadByBatchRequest' is not null or undefined
            assertParamExists('uploadPictureByBatch', 'pictureUploadByBatchRequest', pictureUploadByBatchRequest)
            const localVarPath = `/picture/upload/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pictureUploadByBatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PictureUploadRequest} pictureUploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPictureByUrl: async (pictureUploadRequest: PictureUploadRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pictureUploadRequest' is not null or undefined
            assertParamExists('uploadPictureByUrl', 'pictureUploadRequest', pictureUploadRequest)
            const localVarPath = `/picture/upload/url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pictureUploadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PictureControllerApi - functional programming interface
 * @export
 */
export const PictureControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PictureControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PictureOutPaintingRequest} pictureOutPaintingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPictureOutPaintingTask(pictureOutPaintingRequest: PictureOutPaintingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseCreateOutPaintingTaskResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPictureOutPaintingTask(pictureOutPaintingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureControllerApi.createPictureOutPaintingTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DeleteRequest} deleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePicture(deleteRequest: DeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePicture(deleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureControllerApi.deletePicture']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PictureReviewRequest} pictureReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async doPictureReview(pictureReviewRequest: PictureReviewRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.doPictureReview(pictureReviewRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureControllerApi.doPictureReview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PictureEditRequest} pictureEditRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editPicture(pictureEditRequest: PictureEditRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editPicture(pictureEditRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureControllerApi.editPicture']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PictureEditByBatchRequest} pictureEditByBatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editPictureByBatch(pictureEditByBatchRequest: PictureEditByBatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editPictureByBatch(pictureEditByBatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureControllerApi.editPictureByBatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPictureById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponsePicture>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPictureById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureControllerApi.getPictureById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPictureOutPaintingTaskStatus(taskId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseOutPaintingTaskStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPictureOutPaintingTaskStatus(taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureControllerApi.getPictureOutPaintingTaskStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPictureVoById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponsePictureVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPictureVoById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureControllerApi.getPictureVoById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PictureQueryRequest} pictureQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPictureByPage(pictureQueryRequest: PictureQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponsePagePictureVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPictureByPage(pictureQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureControllerApi.listPictureByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPictureTagCategory(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponsePictureTagCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPictureTagCategory(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureControllerApi.listPictureTagCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PictureQueryRequest} pictureQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPictureVoByPage(pictureQueryRequest: PictureQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponsePagePictureVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPictureVoByPage(pictureQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureControllerApi.listPictureVoByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SearchPictureByColorRequest} searchPictureByColorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchPictureByColor(searchPictureByColorRequest: SearchPictureByColorRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseListPictureVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchPictureByColor(searchPictureByColorRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureControllerApi.searchPictureByColor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search picture by picture
         * @param {SearchPictureByPictureRequest} searchPictureByPictureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchPictureByPicture(searchPictureByPictureRequest: SearchPictureByPictureRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseListImageSearchResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchPictureByPicture(searchPictureByPictureRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureControllerApi.searchPictureByPicture']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PictureUpdateRequest} pictureUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePicture(pictureUpdateRequest: PictureUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePicture(pictureUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureControllerApi.updatePicture']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {File} file 
         * @param {string} [id] 
         * @param {string} [spaceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadPicture(file: File, id?: string, spaceId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponsePictureVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadPicture(file, id, spaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureControllerApi.uploadPicture']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PictureUploadByBatchRequest} pictureUploadByBatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadPictureByBatch(pictureUploadByBatchRequest: PictureUploadByBatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseInteger>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadPictureByBatch(pictureUploadByBatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureControllerApi.uploadPictureByBatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PictureUploadRequest} pictureUploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadPictureByUrl(pictureUploadRequest: PictureUploadRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponsePictureVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadPictureByUrl(pictureUploadRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PictureControllerApi.uploadPictureByUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PictureControllerApi - factory interface
 * @export
 */
export const PictureControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PictureControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {PictureOutPaintingRequest} pictureOutPaintingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPictureOutPaintingTask(pictureOutPaintingRequest: PictureOutPaintingRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseCreateOutPaintingTaskResponse> {
            return localVarFp.createPictureOutPaintingTask(pictureOutPaintingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteRequest} deleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePicture(deleteRequest: DeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseBoolean> {
            return localVarFp.deletePicture(deleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PictureReviewRequest} pictureReviewRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doPictureReview(pictureReviewRequest: PictureReviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseBoolean> {
            return localVarFp.doPictureReview(pictureReviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PictureEditRequest} pictureEditRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPicture(pictureEditRequest: PictureEditRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseBoolean> {
            return localVarFp.editPicture(pictureEditRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PictureEditByBatchRequest} pictureEditByBatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editPictureByBatch(pictureEditByBatchRequest: PictureEditByBatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseBoolean> {
            return localVarFp.editPictureByBatch(pictureEditByBatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPictureById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponsePicture> {
            return localVarFp.getPictureById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPictureOutPaintingTaskStatus(taskId: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseOutPaintingTaskStatusResponse> {
            return localVarFp.getPictureOutPaintingTaskStatus(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPictureVoById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponsePictureVo> {
            return localVarFp.getPictureVoById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PictureQueryRequest} pictureQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPictureByPage(pictureQueryRequest: PictureQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponsePagePictureVo> {
            return localVarFp.listPictureByPage(pictureQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPictureTagCategory(options?: RawAxiosRequestConfig): AxiosPromise<CommonResponsePictureTagCategory> {
            return localVarFp.listPictureTagCategory(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PictureQueryRequest} pictureQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPictureVoByPage(pictureQueryRequest: PictureQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponsePagePictureVo> {
            return localVarFp.listPictureVoByPage(pictureQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SearchPictureByColorRequest} searchPictureByColorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPictureByColor(searchPictureByColorRequest: SearchPictureByColorRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseListPictureVo> {
            return localVarFp.searchPictureByColor(searchPictureByColorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search picture by picture
         * @param {SearchPictureByPictureRequest} searchPictureByPictureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPictureByPicture(searchPictureByPictureRequest: SearchPictureByPictureRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseListImageSearchResult> {
            return localVarFp.searchPictureByPicture(searchPictureByPictureRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PictureUpdateRequest} pictureUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePicture(pictureUpdateRequest: PictureUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseBoolean> {
            return localVarFp.updatePicture(pictureUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {File} file 
         * @param {string} [id] 
         * @param {string} [spaceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPicture(file: File, id?: string, spaceId?: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponsePictureVo> {
            return localVarFp.uploadPicture(file, id, spaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PictureUploadByBatchRequest} pictureUploadByBatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPictureByBatch(pictureUploadByBatchRequest: PictureUploadByBatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseInteger> {
            return localVarFp.uploadPictureByBatch(pictureUploadByBatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PictureUploadRequest} pictureUploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPictureByUrl(pictureUploadRequest: PictureUploadRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponsePictureVo> {
            return localVarFp.uploadPictureByUrl(pictureUploadRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PictureControllerApi - object-oriented interface
 * @export
 * @class PictureControllerApi
 * @extends {BaseAPI}
 */
export class PictureControllerApi extends BaseAPI {
    /**
     * 
     * @param {PictureOutPaintingRequest} pictureOutPaintingRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureControllerApi
     */
    public createPictureOutPaintingTask(pictureOutPaintingRequest: PictureOutPaintingRequest, options?: RawAxiosRequestConfig) {
        return PictureControllerApiFp(this.configuration).createPictureOutPaintingTask(pictureOutPaintingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteRequest} deleteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureControllerApi
     */
    public deletePicture(deleteRequest: DeleteRequest, options?: RawAxiosRequestConfig) {
        return PictureControllerApiFp(this.configuration).deletePicture(deleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PictureReviewRequest} pictureReviewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureControllerApi
     */
    public doPictureReview(pictureReviewRequest: PictureReviewRequest, options?: RawAxiosRequestConfig) {
        return PictureControllerApiFp(this.configuration).doPictureReview(pictureReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PictureEditRequest} pictureEditRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureControllerApi
     */
    public editPicture(pictureEditRequest: PictureEditRequest, options?: RawAxiosRequestConfig) {
        return PictureControllerApiFp(this.configuration).editPicture(pictureEditRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PictureEditByBatchRequest} pictureEditByBatchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureControllerApi
     */
    public editPictureByBatch(pictureEditByBatchRequest: PictureEditByBatchRequest, options?: RawAxiosRequestConfig) {
        return PictureControllerApiFp(this.configuration).editPictureByBatch(pictureEditByBatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureControllerApi
     */
    public getPictureById(id: string, options?: RawAxiosRequestConfig) {
        return PictureControllerApiFp(this.configuration).getPictureById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureControllerApi
     */
    public getPictureOutPaintingTaskStatus(taskId: string, options?: RawAxiosRequestConfig) {
        return PictureControllerApiFp(this.configuration).getPictureOutPaintingTaskStatus(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureControllerApi
     */
    public getPictureVoById(id: string, options?: RawAxiosRequestConfig) {
        return PictureControllerApiFp(this.configuration).getPictureVoById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PictureQueryRequest} pictureQueryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureControllerApi
     */
    public listPictureByPage(pictureQueryRequest: PictureQueryRequest, options?: RawAxiosRequestConfig) {
        return PictureControllerApiFp(this.configuration).listPictureByPage(pictureQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureControllerApi
     */
    public listPictureTagCategory(options?: RawAxiosRequestConfig) {
        return PictureControllerApiFp(this.configuration).listPictureTagCategory(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PictureQueryRequest} pictureQueryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureControllerApi
     */
    public listPictureVoByPage(pictureQueryRequest: PictureQueryRequest, options?: RawAxiosRequestConfig) {
        return PictureControllerApiFp(this.configuration).listPictureVoByPage(pictureQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchPictureByColorRequest} searchPictureByColorRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureControllerApi
     */
    public searchPictureByColor(searchPictureByColorRequest: SearchPictureByColorRequest, options?: RawAxiosRequestConfig) {
        return PictureControllerApiFp(this.configuration).searchPictureByColor(searchPictureByColorRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search picture by picture
     * @param {SearchPictureByPictureRequest} searchPictureByPictureRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureControllerApi
     */
    public searchPictureByPicture(searchPictureByPictureRequest: SearchPictureByPictureRequest, options?: RawAxiosRequestConfig) {
        return PictureControllerApiFp(this.configuration).searchPictureByPicture(searchPictureByPictureRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PictureUpdateRequest} pictureUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureControllerApi
     */
    public updatePicture(pictureUpdateRequest: PictureUpdateRequest, options?: RawAxiosRequestConfig) {
        return PictureControllerApiFp(this.configuration).updatePicture(pictureUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {File} file 
     * @param {string} [id] 
     * @param {string} [spaceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureControllerApi
     */
    public uploadPicture(file: File, id?: string, spaceId?: string, options?: RawAxiosRequestConfig) {
        return PictureControllerApiFp(this.configuration).uploadPicture(file, id, spaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PictureUploadByBatchRequest} pictureUploadByBatchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureControllerApi
     */
    public uploadPictureByBatch(pictureUploadByBatchRequest: PictureUploadByBatchRequest, options?: RawAxiosRequestConfig) {
        return PictureControllerApiFp(this.configuration).uploadPictureByBatch(pictureUploadByBatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PictureUploadRequest} pictureUploadRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PictureControllerApi
     */
    public uploadPictureByUrl(pictureUploadRequest: PictureUploadRequest, options?: RawAxiosRequestConfig) {
        return PictureControllerApiFp(this.configuration).uploadPictureByUrl(pictureUploadRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SpaceAnalyzeControllerApi - axios parameter creator
 * @export
 */
export const SpaceAnalyzeControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SpaceCategoryAnalyzeRequest} spaceCategoryAnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceCategoryAnalyze: async (spaceCategoryAnalyzeRequest: SpaceCategoryAnalyzeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceCategoryAnalyzeRequest' is not null or undefined
            assertParamExists('getSpaceCategoryAnalyze', 'spaceCategoryAnalyzeRequest', spaceCategoryAnalyzeRequest)
            const localVarPath = `/space/analyze/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spaceCategoryAnalyzeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SpaceRankAnalyzeRequest} spaceRankAnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceRankAnalyze: async (spaceRankAnalyzeRequest: SpaceRankAnalyzeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceRankAnalyzeRequest' is not null or undefined
            assertParamExists('getSpaceRankAnalyze', 'spaceRankAnalyzeRequest', spaceRankAnalyzeRequest)
            const localVarPath = `/space/analyze/rank`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spaceRankAnalyzeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SpaceSizeAnalyzeRequest} spaceSizeAnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceSizeAnalyze: async (spaceSizeAnalyzeRequest: SpaceSizeAnalyzeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceSizeAnalyzeRequest' is not null or undefined
            assertParamExists('getSpaceSizeAnalyze', 'spaceSizeAnalyzeRequest', spaceSizeAnalyzeRequest)
            const localVarPath = `/space/analyze/size`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spaceSizeAnalyzeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SpaceTagAnalyzeRequest} spaceTagAnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceTagAnalyze: async (spaceTagAnalyzeRequest: SpaceTagAnalyzeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceTagAnalyzeRequest' is not null or undefined
            assertParamExists('getSpaceTagAnalyze', 'spaceTagAnalyzeRequest', spaceTagAnalyzeRequest)
            const localVarPath = `/space/analyze/tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spaceTagAnalyzeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SpaceUsageAnalyzeRequest} spaceUsageAnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceUsageAnalyze: async (spaceUsageAnalyzeRequest: SpaceUsageAnalyzeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceUsageAnalyzeRequest' is not null or undefined
            assertParamExists('getSpaceUsageAnalyze', 'spaceUsageAnalyzeRequest', spaceUsageAnalyzeRequest)
            const localVarPath = `/space/analyze/usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spaceUsageAnalyzeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SpaceUserAnalyzeRequest} spaceUserAnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceUserAnalyze: async (spaceUserAnalyzeRequest: SpaceUserAnalyzeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceUserAnalyzeRequest' is not null or undefined
            assertParamExists('getSpaceUserAnalyze', 'spaceUserAnalyzeRequest', spaceUserAnalyzeRequest)
            const localVarPath = `/space/analyze/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spaceUserAnalyzeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpaceAnalyzeControllerApi - functional programming interface
 * @export
 */
export const SpaceAnalyzeControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpaceAnalyzeControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SpaceCategoryAnalyzeRequest} spaceCategoryAnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpaceCategoryAnalyze(spaceCategoryAnalyzeRequest: SpaceCategoryAnalyzeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseListSpaceCategoryAnalyzeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpaceCategoryAnalyze(spaceCategoryAnalyzeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceAnalyzeControllerApi.getSpaceCategoryAnalyze']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SpaceRankAnalyzeRequest} spaceRankAnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpaceRankAnalyze(spaceRankAnalyzeRequest: SpaceRankAnalyzeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseListSpaceVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpaceRankAnalyze(spaceRankAnalyzeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceAnalyzeControllerApi.getSpaceRankAnalyze']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SpaceSizeAnalyzeRequest} spaceSizeAnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpaceSizeAnalyze(spaceSizeAnalyzeRequest: SpaceSizeAnalyzeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseListSpaceSizeAnalyzeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpaceSizeAnalyze(spaceSizeAnalyzeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceAnalyzeControllerApi.getSpaceSizeAnalyze']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SpaceTagAnalyzeRequest} spaceTagAnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpaceTagAnalyze(spaceTagAnalyzeRequest: SpaceTagAnalyzeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseListSpaceTagAnalyzeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpaceTagAnalyze(spaceTagAnalyzeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceAnalyzeControllerApi.getSpaceTagAnalyze']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SpaceUsageAnalyzeRequest} spaceUsageAnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpaceUsageAnalyze(spaceUsageAnalyzeRequest: SpaceUsageAnalyzeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseSpaceUsageAnalyzeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpaceUsageAnalyze(spaceUsageAnalyzeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceAnalyzeControllerApi.getSpaceUsageAnalyze']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SpaceUserAnalyzeRequest} spaceUserAnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpaceUserAnalyze(spaceUserAnalyzeRequest: SpaceUserAnalyzeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseListSpaceUserAnalyzeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpaceUserAnalyze(spaceUserAnalyzeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceAnalyzeControllerApi.getSpaceUserAnalyze']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SpaceAnalyzeControllerApi - factory interface
 * @export
 */
export const SpaceAnalyzeControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpaceAnalyzeControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {SpaceCategoryAnalyzeRequest} spaceCategoryAnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceCategoryAnalyze(spaceCategoryAnalyzeRequest: SpaceCategoryAnalyzeRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseListSpaceCategoryAnalyzeResponse> {
            return localVarFp.getSpaceCategoryAnalyze(spaceCategoryAnalyzeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpaceRankAnalyzeRequest} spaceRankAnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceRankAnalyze(spaceRankAnalyzeRequest: SpaceRankAnalyzeRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseListSpaceVo> {
            return localVarFp.getSpaceRankAnalyze(spaceRankAnalyzeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpaceSizeAnalyzeRequest} spaceSizeAnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceSizeAnalyze(spaceSizeAnalyzeRequest: SpaceSizeAnalyzeRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseListSpaceSizeAnalyzeResponse> {
            return localVarFp.getSpaceSizeAnalyze(spaceSizeAnalyzeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpaceTagAnalyzeRequest} spaceTagAnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceTagAnalyze(spaceTagAnalyzeRequest: SpaceTagAnalyzeRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseListSpaceTagAnalyzeResponse> {
            return localVarFp.getSpaceTagAnalyze(spaceTagAnalyzeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpaceUsageAnalyzeRequest} spaceUsageAnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceUsageAnalyze(spaceUsageAnalyzeRequest: SpaceUsageAnalyzeRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseSpaceUsageAnalyzeResponse> {
            return localVarFp.getSpaceUsageAnalyze(spaceUsageAnalyzeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpaceUserAnalyzeRequest} spaceUserAnalyzeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceUserAnalyze(spaceUserAnalyzeRequest: SpaceUserAnalyzeRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseListSpaceUserAnalyzeResponse> {
            return localVarFp.getSpaceUserAnalyze(spaceUserAnalyzeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpaceAnalyzeControllerApi - object-oriented interface
 * @export
 * @class SpaceAnalyzeControllerApi
 * @extends {BaseAPI}
 */
export class SpaceAnalyzeControllerApi extends BaseAPI {
    /**
     * 
     * @param {SpaceCategoryAnalyzeRequest} spaceCategoryAnalyzeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceAnalyzeControllerApi
     */
    public getSpaceCategoryAnalyze(spaceCategoryAnalyzeRequest: SpaceCategoryAnalyzeRequest, options?: RawAxiosRequestConfig) {
        return SpaceAnalyzeControllerApiFp(this.configuration).getSpaceCategoryAnalyze(spaceCategoryAnalyzeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpaceRankAnalyzeRequest} spaceRankAnalyzeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceAnalyzeControllerApi
     */
    public getSpaceRankAnalyze(spaceRankAnalyzeRequest: SpaceRankAnalyzeRequest, options?: RawAxiosRequestConfig) {
        return SpaceAnalyzeControllerApiFp(this.configuration).getSpaceRankAnalyze(spaceRankAnalyzeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpaceSizeAnalyzeRequest} spaceSizeAnalyzeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceAnalyzeControllerApi
     */
    public getSpaceSizeAnalyze(spaceSizeAnalyzeRequest: SpaceSizeAnalyzeRequest, options?: RawAxiosRequestConfig) {
        return SpaceAnalyzeControllerApiFp(this.configuration).getSpaceSizeAnalyze(spaceSizeAnalyzeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpaceTagAnalyzeRequest} spaceTagAnalyzeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceAnalyzeControllerApi
     */
    public getSpaceTagAnalyze(spaceTagAnalyzeRequest: SpaceTagAnalyzeRequest, options?: RawAxiosRequestConfig) {
        return SpaceAnalyzeControllerApiFp(this.configuration).getSpaceTagAnalyze(spaceTagAnalyzeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpaceUsageAnalyzeRequest} spaceUsageAnalyzeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceAnalyzeControllerApi
     */
    public getSpaceUsageAnalyze(spaceUsageAnalyzeRequest: SpaceUsageAnalyzeRequest, options?: RawAxiosRequestConfig) {
        return SpaceAnalyzeControllerApiFp(this.configuration).getSpaceUsageAnalyze(spaceUsageAnalyzeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpaceUserAnalyzeRequest} spaceUserAnalyzeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceAnalyzeControllerApi
     */
    public getSpaceUserAnalyze(spaceUserAnalyzeRequest: SpaceUserAnalyzeRequest, options?: RawAxiosRequestConfig) {
        return SpaceAnalyzeControllerApiFp(this.configuration).getSpaceUserAnalyze(spaceUserAnalyzeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SpaceControllerApi - axios parameter creator
 * @export
 */
export const SpaceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SpaceAddRequest} spaceAddRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSpace: async (spaceAddRequest: SpaceAddRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceAddRequest' is not null or undefined
            assertParamExists('addSpace', 'spaceAddRequest', spaceAddRequest)
            const localVarPath = `/space/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spaceAddRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteRequest} deleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpace: async (deleteRequest: DeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteRequest' is not null or undefined
            assertParamExists('deleteSpace', 'deleteRequest', deleteRequest)
            const localVarPath = `/space`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SpaceEditRequest} spaceEditRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editSpace: async (spaceEditRequest: SpaceEditRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceEditRequest' is not null or undefined
            assertParamExists('editSpace', 'spaceEditRequest', spaceEditRequest)
            const localVarPath = `/space`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spaceEditRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceVoById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSpaceVoById', 'id', id)
            const localVarPath = `/space`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SpaceQueryRequest} spaceQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSpaceByPage: async (spaceQueryRequest: SpaceQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceQueryRequest' is not null or undefined
            assertParamExists('listSpaceByPage', 'spaceQueryRequest', spaceQueryRequest)
            const localVarPath = `/space/full/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spaceQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSpaceLevel: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/space/level/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SpaceQueryRequest} spaceQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSpaceVoByPage: async (spaceQueryRequest: SpaceQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceQueryRequest' is not null or undefined
            assertParamExists('listSpaceVoByPage', 'spaceQueryRequest', spaceQueryRequest)
            const localVarPath = `/space/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spaceQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SpaceUpdateRequest} spaceUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpace: async (spaceUpdateRequest: SpaceUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceUpdateRequest' is not null or undefined
            assertParamExists('updateSpace', 'spaceUpdateRequest', spaceUpdateRequest)
            const localVarPath = `/space/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spaceUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpaceControllerApi - functional programming interface
 * @export
 */
export const SpaceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpaceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SpaceAddRequest} spaceAddRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSpace(spaceAddRequest: SpaceAddRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSpace(spaceAddRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceControllerApi.addSpace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DeleteRequest} deleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSpace(deleteRequest: DeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSpace(deleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceControllerApi.deleteSpace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SpaceEditRequest} spaceEditRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editSpace(spaceEditRequest: SpaceEditRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editSpace(spaceEditRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceControllerApi.editSpace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpaceVoById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseSpaceVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpaceVoById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceControllerApi.getSpaceVoById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SpaceQueryRequest} spaceQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSpaceByPage(spaceQueryRequest: SpaceQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponsePageSpaceVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSpaceByPage(spaceQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceControllerApi.listSpaceByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSpaceLevel(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseListSpaceLevel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSpaceLevel(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceControllerApi.listSpaceLevel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SpaceQueryRequest} spaceQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSpaceVoByPage(spaceQueryRequest: SpaceQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponsePageSpaceVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSpaceVoByPage(spaceQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceControllerApi.listSpaceVoByPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SpaceUpdateRequest} spaceUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSpace(spaceUpdateRequest: SpaceUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSpace(spaceUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceControllerApi.updateSpace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SpaceControllerApi - factory interface
 * @export
 */
export const SpaceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpaceControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {SpaceAddRequest} spaceAddRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSpace(spaceAddRequest: SpaceAddRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseString> {
            return localVarFp.addSpace(spaceAddRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteRequest} deleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpace(deleteRequest: DeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseBoolean> {
            return localVarFp.deleteSpace(deleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpaceEditRequest} spaceEditRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editSpace(spaceEditRequest: SpaceEditRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseBoolean> {
            return localVarFp.editSpace(spaceEditRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceVoById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseSpaceVo> {
            return localVarFp.getSpaceVoById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpaceQueryRequest} spaceQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSpaceByPage(spaceQueryRequest: SpaceQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponsePageSpaceVo> {
            return localVarFp.listSpaceByPage(spaceQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSpaceLevel(options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseListSpaceLevel> {
            return localVarFp.listSpaceLevel(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpaceQueryRequest} spaceQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSpaceVoByPage(spaceQueryRequest: SpaceQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponsePageSpaceVo> {
            return localVarFp.listSpaceVoByPage(spaceQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpaceUpdateRequest} spaceUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpace(spaceUpdateRequest: SpaceUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseBoolean> {
            return localVarFp.updateSpace(spaceUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpaceControllerApi - object-oriented interface
 * @export
 * @class SpaceControllerApi
 * @extends {BaseAPI}
 */
export class SpaceControllerApi extends BaseAPI {
    /**
     * 
     * @param {SpaceAddRequest} spaceAddRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceControllerApi
     */
    public addSpace(spaceAddRequest: SpaceAddRequest, options?: RawAxiosRequestConfig) {
        return SpaceControllerApiFp(this.configuration).addSpace(spaceAddRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteRequest} deleteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceControllerApi
     */
    public deleteSpace(deleteRequest: DeleteRequest, options?: RawAxiosRequestConfig) {
        return SpaceControllerApiFp(this.configuration).deleteSpace(deleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpaceEditRequest} spaceEditRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceControllerApi
     */
    public editSpace(spaceEditRequest: SpaceEditRequest, options?: RawAxiosRequestConfig) {
        return SpaceControllerApiFp(this.configuration).editSpace(spaceEditRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceControllerApi
     */
    public getSpaceVoById(id: string, options?: RawAxiosRequestConfig) {
        return SpaceControllerApiFp(this.configuration).getSpaceVoById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpaceQueryRequest} spaceQueryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceControllerApi
     */
    public listSpaceByPage(spaceQueryRequest: SpaceQueryRequest, options?: RawAxiosRequestConfig) {
        return SpaceControllerApiFp(this.configuration).listSpaceByPage(spaceQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceControllerApi
     */
    public listSpaceLevel(options?: RawAxiosRequestConfig) {
        return SpaceControllerApiFp(this.configuration).listSpaceLevel(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpaceQueryRequest} spaceQueryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceControllerApi
     */
    public listSpaceVoByPage(spaceQueryRequest: SpaceQueryRequest, options?: RawAxiosRequestConfig) {
        return SpaceControllerApiFp(this.configuration).listSpaceVoByPage(spaceQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpaceUpdateRequest} spaceUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceControllerApi
     */
    public updateSpace(spaceUpdateRequest: SpaceUpdateRequest, options?: RawAxiosRequestConfig) {
        return SpaceControllerApiFp(this.configuration).updateSpace(spaceUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SpaceUserControllerApi - axios parameter creator
 * @export
 */
export const SpaceUserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SpaceUserAddRequest} spaceUserAddRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSpaceUser: async (spaceUserAddRequest: SpaceUserAddRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceUserAddRequest' is not null or undefined
            assertParamExists('addSpaceUser', 'spaceUserAddRequest', spaceUserAddRequest)
            const localVarPath = `/space-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spaceUserAddRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteRequest} deleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpaceUser: async (deleteRequest: DeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteRequest' is not null or undefined
            assertParamExists('deleteSpaceUser', 'deleteRequest', deleteRequest)
            const localVarPath = `/space-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SpaceUserEditRequest} spaceUserEditRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editSpaceUser: async (spaceUserEditRequest: SpaceUserEditRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceUserEditRequest' is not null or undefined
            assertParamExists('editSpaceUser', 'spaceUserEditRequest', spaceUserEditRequest)
            const localVarPath = `/space-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spaceUserEditRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SpaceUserQueryRequest} spaceUserQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceUser: async (spaceUserQueryRequest: SpaceUserQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceUserQueryRequest' is not null or undefined
            assertParamExists('getSpaceUser', 'spaceUserQueryRequest', spaceUserQueryRequest)
            const localVarPath = `/space-user/single`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spaceUserQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyTeamSpace: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/space-user/list/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SpaceUserQueryRequest} spaceUserQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSpaceUser: async (spaceUserQueryRequest: SpaceUserQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceUserQueryRequest' is not null or undefined
            assertParamExists('listSpaceUser', 'spaceUserQueryRequest', spaceUserQueryRequest)
            const localVarPath = `/space-user/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spaceUserQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpaceUserControllerApi - functional programming interface
 * @export
 */
export const SpaceUserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpaceUserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SpaceUserAddRequest} spaceUserAddRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSpaceUser(spaceUserAddRequest: SpaceUserAddRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSpaceUser(spaceUserAddRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceUserControllerApi.addSpaceUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DeleteRequest} deleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSpaceUser(deleteRequest: DeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSpaceUser(deleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceUserControllerApi.deleteSpaceUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SpaceUserEditRequest} spaceUserEditRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editSpaceUser(spaceUserEditRequest: SpaceUserEditRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editSpaceUser(spaceUserEditRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceUserControllerApi.editSpaceUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SpaceUserQueryRequest} spaceUserQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpaceUser(spaceUserQueryRequest: SpaceUserQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseSpaceUserVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpaceUser(spaceUserQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceUserControllerApi.getSpaceUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMyTeamSpace(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseListSpaceUserVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMyTeamSpace(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceUserControllerApi.listMyTeamSpace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SpaceUserQueryRequest} spaceUserQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSpaceUser(spaceUserQueryRequest: SpaceUserQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseListSpaceUserVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSpaceUser(spaceUserQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SpaceUserControllerApi.listSpaceUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SpaceUserControllerApi - factory interface
 * @export
 */
export const SpaceUserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpaceUserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {SpaceUserAddRequest} spaceUserAddRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSpaceUser(spaceUserAddRequest: SpaceUserAddRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseString> {
            return localVarFp.addSpaceUser(spaceUserAddRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteRequest} deleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpaceUser(deleteRequest: DeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseBoolean> {
            return localVarFp.deleteSpaceUser(deleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpaceUserEditRequest} spaceUserEditRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editSpaceUser(spaceUserEditRequest: SpaceUserEditRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseBoolean> {
            return localVarFp.editSpaceUser(spaceUserEditRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpaceUserQueryRequest} spaceUserQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceUser(spaceUserQueryRequest: SpaceUserQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseSpaceUserVo> {
            return localVarFp.getSpaceUser(spaceUserQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyTeamSpace(options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseListSpaceUserVo> {
            return localVarFp.listMyTeamSpace(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SpaceUserQueryRequest} spaceUserQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSpaceUser(spaceUserQueryRequest: SpaceUserQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseListSpaceUserVo> {
            return localVarFp.listSpaceUser(spaceUserQueryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpaceUserControllerApi - object-oriented interface
 * @export
 * @class SpaceUserControllerApi
 * @extends {BaseAPI}
 */
export class SpaceUserControllerApi extends BaseAPI {
    /**
     * 
     * @param {SpaceUserAddRequest} spaceUserAddRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceUserControllerApi
     */
    public addSpaceUser(spaceUserAddRequest: SpaceUserAddRequest, options?: RawAxiosRequestConfig) {
        return SpaceUserControllerApiFp(this.configuration).addSpaceUser(spaceUserAddRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteRequest} deleteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceUserControllerApi
     */
    public deleteSpaceUser(deleteRequest: DeleteRequest, options?: RawAxiosRequestConfig) {
        return SpaceUserControllerApiFp(this.configuration).deleteSpaceUser(deleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpaceUserEditRequest} spaceUserEditRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceUserControllerApi
     */
    public editSpaceUser(spaceUserEditRequest: SpaceUserEditRequest, options?: RawAxiosRequestConfig) {
        return SpaceUserControllerApiFp(this.configuration).editSpaceUser(spaceUserEditRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpaceUserQueryRequest} spaceUserQueryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceUserControllerApi
     */
    public getSpaceUser(spaceUserQueryRequest: SpaceUserQueryRequest, options?: RawAxiosRequestConfig) {
        return SpaceUserControllerApiFp(this.configuration).getSpaceUser(spaceUserQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceUserControllerApi
     */
    public listMyTeamSpace(options?: RawAxiosRequestConfig) {
        return SpaceUserControllerApiFp(this.configuration).listMyTeamSpace(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SpaceUserQueryRequest} spaceUserQueryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpaceUserControllerApi
     */
    public listSpaceUser(spaceUserQueryRequest: SpaceUserQueryRequest, options?: RawAxiosRequestConfig) {
        return SpaceUserControllerApiFp(this.configuration).listSpaceUser(spaceUserQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UnresolvedEntityControllerApi - axios parameter creator
 * @export
 */
export const UnresolvedEntityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItemEntity: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/entity/unresolved/page/order-item`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchResultEntity: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/entity/unresolved/search/search-result-entity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceCategoryAnalyzeResponse: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/entity/unresolved/space/analyze/space-category-analyze-response`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceLevelEntity: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/entity/unresolved/space/space-level`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceSizeAnalyzeResponse: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/entity/unresolved/space/analyze/space-size-analyze-response`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceTagAnalyzeResponse: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/entity/unresolved/space/analyze/space-tag-analyze-response`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceUserAnalyzeResponse: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/entity/unresolved/space/analyze/space-user-analyze-response`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UnresolvedEntityControllerApi - functional programming interface
 * @export
 */
export const UnresolvedEntityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UnresolvedEntityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderItemEntity(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderItemEntity(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UnresolvedEntityControllerApi.getOrderItemEntity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSearchResultEntity(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageSearchResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSearchResultEntity(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UnresolvedEntityControllerApi.getSearchResultEntity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpaceCategoryAnalyzeResponse(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpaceCategoryAnalyzeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpaceCategoryAnalyzeResponse(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UnresolvedEntityControllerApi.getSpaceCategoryAnalyzeResponse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpaceLevelEntity(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpaceLevel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpaceLevelEntity(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UnresolvedEntityControllerApi.getSpaceLevelEntity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpaceSizeAnalyzeResponse(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpaceSizeAnalyzeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpaceSizeAnalyzeResponse(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UnresolvedEntityControllerApi.getSpaceSizeAnalyzeResponse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpaceTagAnalyzeResponse(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpaceTagAnalyzeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpaceTagAnalyzeResponse(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UnresolvedEntityControllerApi.getSpaceTagAnalyzeResponse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpaceUserAnalyzeResponse(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpaceUserAnalyzeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpaceUserAnalyzeResponse(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UnresolvedEntityControllerApi.getSpaceUserAnalyzeResponse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UnresolvedEntityControllerApi - factory interface
 * @export
 */
export const UnresolvedEntityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UnresolvedEntityControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItemEntity(options?: RawAxiosRequestConfig): AxiosPromise<OrderItem> {
            return localVarFp.getOrderItemEntity(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchResultEntity(options?: RawAxiosRequestConfig): AxiosPromise<ImageSearchResult> {
            return localVarFp.getSearchResultEntity(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceCategoryAnalyzeResponse(options?: RawAxiosRequestConfig): AxiosPromise<SpaceCategoryAnalyzeResponse> {
            return localVarFp.getSpaceCategoryAnalyzeResponse(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceLevelEntity(options?: RawAxiosRequestConfig): AxiosPromise<SpaceLevel> {
            return localVarFp.getSpaceLevelEntity(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceSizeAnalyzeResponse(options?: RawAxiosRequestConfig): AxiosPromise<SpaceSizeAnalyzeResponse> {
            return localVarFp.getSpaceSizeAnalyzeResponse(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceTagAnalyzeResponse(options?: RawAxiosRequestConfig): AxiosPromise<SpaceTagAnalyzeResponse> {
            return localVarFp.getSpaceTagAnalyzeResponse(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceUserAnalyzeResponse(options?: RawAxiosRequestConfig): AxiosPromise<SpaceUserAnalyzeResponse> {
            return localVarFp.getSpaceUserAnalyzeResponse(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UnresolvedEntityControllerApi - object-oriented interface
 * @export
 * @class UnresolvedEntityControllerApi
 * @extends {BaseAPI}
 */
export class UnresolvedEntityControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnresolvedEntityControllerApi
     */
    public getOrderItemEntity(options?: RawAxiosRequestConfig) {
        return UnresolvedEntityControllerApiFp(this.configuration).getOrderItemEntity(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnresolvedEntityControllerApi
     */
    public getSearchResultEntity(options?: RawAxiosRequestConfig) {
        return UnresolvedEntityControllerApiFp(this.configuration).getSearchResultEntity(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnresolvedEntityControllerApi
     */
    public getSpaceCategoryAnalyzeResponse(options?: RawAxiosRequestConfig) {
        return UnresolvedEntityControllerApiFp(this.configuration).getSpaceCategoryAnalyzeResponse(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnresolvedEntityControllerApi
     */
    public getSpaceLevelEntity(options?: RawAxiosRequestConfig) {
        return UnresolvedEntityControllerApiFp(this.configuration).getSpaceLevelEntity(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnresolvedEntityControllerApi
     */
    public getSpaceSizeAnalyzeResponse(options?: RawAxiosRequestConfig) {
        return UnresolvedEntityControllerApiFp(this.configuration).getSpaceSizeAnalyzeResponse(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnresolvedEntityControllerApi
     */
    public getSpaceTagAnalyzeResponse(options?: RawAxiosRequestConfig) {
        return UnresolvedEntityControllerApiFp(this.configuration).getSpaceTagAnalyzeResponse(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnresolvedEntityControllerApi
     */
    public getSpaceUserAnalyzeResponse(options?: RawAxiosRequestConfig) {
        return UnresolvedEntityControllerApiFp(this.configuration).getSpaceUserAnalyzeResponse(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DeleteRequest} deleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (deleteRequest: DeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteRequest' is not null or undefined
            assertParamExists('deleteUser', 'deleteRequest', deleteRequest)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserById', 'id', id)
            const localVarPath = `/user/full-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserVoById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserVoById', 'id', id)
            const localVarPath = `/user/vo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserQueryRequest} userQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUser: async (userQueryRequest: UserQueryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userQueryRequest' is not null or undefined
            assertParamExists('listUser', 'userQueryRequest', userQueryRequest)
            const localVarPath = `/user/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserUpdateRequest} userUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userUpdateRequest: UserUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUpdateRequest' is not null or undefined
            assertParamExists('updateUser', 'userUpdateRequest', userUpdateRequest)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserAddRequest} userAddRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAdd: async (userAddRequest: UserAddRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userAddRequest' is not null or undefined
            assertParamExists('userAdd', 'userAddRequest', userAddRequest)
            const localVarPath = `/user/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userAddRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserLoginRequest} userLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin: async (userLoginRequest: UserLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userLoginRequest' is not null or undefined
            assertParamExists('userLogin', 'userLoginRequest', userLoginRequest)
            const localVarPath = `/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserRegisterRequest} userRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegister: async (userRegisterRequest: UserRegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRegisterRequest' is not null or undefined
            assertParamExists('userRegister', 'userRegisterRequest', userRegisterRequest)
            const localVarPath = `/user/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRegisterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DeleteRequest} deleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(deleteRequest: DeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(deleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.deleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoginUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseLoginUserVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoginUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.getLoginUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.getUserById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserVoById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseUserVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserVoById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.getUserVoById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserQueryRequest} userQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUser(userQueryRequest: UserQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponsePageUserVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUser(userQueryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.listUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserUpdateRequest} userUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userUpdateRequest: UserUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.updateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserAddRequest} userAddRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userAdd(userAddRequest: UserAddRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseLong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userAdd(userAddRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.userAdd']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserLoginRequest} userLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogin(userLoginRequest: UserLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseLoginUserVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogin(userLoginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.userLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLogout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userLogout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.userLogout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserRegisterRequest} userRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userRegister(userRegisterRequest: UserRegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponseLong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userRegister(userRegisterRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.userRegister']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {DeleteRequest} deleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(deleteRequest: DeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseBoolean> {
            return localVarFp.deleteUser(deleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginUser(options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseLoginUserVo> {
            return localVarFp.getLoginUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseUser> {
            return localVarFp.getUserById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserVoById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseUserVo> {
            return localVarFp.getUserVoById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserQueryRequest} userQueryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUser(userQueryRequest: UserQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponsePageUserVo> {
            return localVarFp.listUser(userQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserUpdateRequest} userUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userUpdateRequest: UserUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseBoolean> {
            return localVarFp.updateUser(userUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserAddRequest} userAddRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAdd(userAddRequest: UserAddRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseLong> {
            return localVarFp.userAdd(userAddRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserLoginRequest} userLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin(userLoginRequest: UserLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseLoginUserVo> {
            return localVarFp.userLogin(userLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogout(options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseBoolean> {
            return localVarFp.userLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserRegisterRequest} userRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegister(userRegisterRequest: UserRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonResponseLong> {
            return localVarFp.userRegister(userRegisterRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @param {DeleteRequest} deleteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public deleteUser(deleteRequest: DeleteRequest, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).deleteUser(deleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getLoginUser(options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getLoginUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUserById(id: number, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUserById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUserVoById(id: number, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUserVoById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserQueryRequest} userQueryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public listUser(userQueryRequest: UserQueryRequest, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).listUser(userQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserUpdateRequest} userUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public updateUser(userUpdateRequest: UserUpdateRequest, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).updateUser(userUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserAddRequest} userAddRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public userAdd(userAddRequest: UserAddRequest, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).userAdd(userAddRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserLoginRequest} userLoginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public userLogin(userLoginRequest: UserLoginRequest, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).userLogin(userLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public userLogout(options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).userLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserRegisterRequest} userRegisterRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public userRegister(userRegisterRequest: UserRegisterRequest, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).userRegister(userRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



